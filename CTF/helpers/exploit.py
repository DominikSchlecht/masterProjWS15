from ictf import iCTF
import threading
import sys
from time import sleep
import random
import socket

# Shiny colors
OKBLUE  = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL    = '\033[91m'
ENDC    = '\033[0m'

# Custom recv_unitl.. you know.. for reasons
def recv_until(s, text):
    BUFFER_SIZE = 2048
    data = ""
    loop = True
    while loop:
        tmp = s.recv(BUFFER_SIZE)
        if tmp.find(text) != -1: loop = False
        data += tmp
    return data

# Prepare everything and fire the exploits!!!
def prepare():
    # Get iCTF-Foo and login
    ctf     = iCTF()
    team    = ctf.login("dominik.schlecht@hotmail.de", "cupjCQdjednhn4yZ")

    # holts targets in format:
    #  {'team_name' : "Team name",'ip_address' : "10.7.<team_id>.2",'port' : <int port number>,'flag_id' : "Flag ID to steal"}
    targets = team.get_targets(sys.argv[1])

    # not really needed..
    results = []

    for target in targets:
        # Prevent too many threads (no DoS!!!)
        while 20 < threading.activeCount():
            sleep(0.1)

        # Create a new thread running an exploit
        thread = exploit(
                    targets.get("ip_address"),
                    targets.get("port"),
                    targets.get("flag_id")
                )
        results.append(thread)
        thread.start()

# Multithreaded class
class exploit(threading.Thread):
    def __init__(self, ip, port, flagID):
    	threading.Thread.__init__(self)
    	self.ip = ip
        self.port = port
    	self.flagID = flagID

    def run(self):
        # Init the socket
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.ip, int(self.port)))

        # Your exploit here!
        flag = s.recv(512)

        # Clean up
        s.close()

        # Submit it!
        # Param needs to be a list
        ret = team.submit([flag])

        for resp in ret:
            if resp == "correct":
                print OKGREEN   + "[+] Submitted flag sucessfully"              + ENDC
            elif resp == "correct":
                print FAIL      + "[-] Incorrect flag"                          + ENDC
            elif resp == "alreadysubmitted" or resp == "notactive":
                print WARNING   + "[|] Flag already submitted or not active"    + ENDC
            elif resp == "toomanyincorrect":
                print FAIL      + "[-] Too many incorrect flags"                + ENDC
            else:
                print OKBLUE    + "[~] Magic happening!!!!!"                    + ENDC

# Start here..
if __name__ == '__main__':
    prepare()
